#!/usr/bin/env python3
"""–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ RAG –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –∏–∑ confluence_data.json —Å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–∑–±–∏–≤–∫–æ–π."""

import asyncio
import json
from pathlib import Path

import structlog

from llamacpp_server.retrieval.rag_builder import RAGBuilder

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
structlog.configure(
    processors=[
        structlog.stdlib.filter_by_level,
        structlog.stdlib.add_logger_name,
        structlog.stdlib.add_log_level,
        structlog.stdlib.PositionalArgumentsFormatter(),
        structlog.processors.TimeStamper(fmt="ISO"),
        structlog.dev.ConsoleRenderer()
    ],
    wrapper_class=structlog.stdlib.BoundLogger,
    logger_factory=structlog.stdlib.LoggerFactory(),
    cache_logger_on_first_use=True,
)
logger = structlog.get_logger(__name__)

async def test_rag_search(index_dir: Path) -> None:
    """–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –≤ —Å–æ–∑–¥–∞–Ω–Ω–æ–º RAG –∏–Ω–¥–µ–∫—Å–µ."""
    from llamacpp_server.retrieval.rag_service import RAGService
    from llamacpp_server.retrieval.embedding_service import EmbeddingService  
    from llamacpp_server.retrieval.faiss_store import FaissVectorStore
    
    logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –≤ RAG")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
        embedding_service = EmbeddingService()
        await embedding_service.is_ready()
        
        vector_store = FaissVectorStore()
        await vector_store.load_index(str(index_dir))
        
        rag_service = RAGService(embedding_service, vector_store)
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        test_queries = [
            "–ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Jenkins?",
            "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã Docker",
            "–ß—Ç–æ —Ç–∞–∫–æ–µ Kubernetes?", 
            "Git –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–µ—Ç–∫–∞–º–∏",
            "HTTP –∫–æ–¥—ã –æ—Ç–≤–µ—Ç–æ–≤ API"
        ]
        
        logger.info("üéØ –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã")
        
        for i, query in enumerate(test_queries, 1):
            logger.info(f"–ó–∞–ø—Ä–æ—Å {i}: {query}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
            context = await rag_service.search_relevant_context(query, k=3)
            
            if context:
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(context)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
                for j, doc in enumerate(context, 1):
                    preview = doc[:150].replace('\n', ' ') + "..." if len(doc) > 150 else doc
                    logger.info(f"  –î–æ–∫—É–º–µ–Ω—Ç {j}: {preview}")
            else:
                logger.warning(f"‚ùå –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {query}")
            
            print("-" * 80)
            
        logger.info("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–∏—Å–∫–∞", error=str(e), exc_info=True)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è RAG —Å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–∑–±–∏–≤–∫–æ–π."""
    import sys

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    mode = "semantic"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–±–∏–≤–∫–∞
    test_mode = False
    
    if len(sys.argv) > 1:
        arg = sys.argv[1].lower()
        if arg == "--simple":
            mode = "simple"
        elif arg == "--semantic":
            mode = "semantic"
        elif arg == "--test":
            mode = "semantic"
            test_mode = True
        elif arg == "--help":
            print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
            print("  python build_rag.py --semantic   # –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
            print("  python build_rag.py --simple     # –ü—Ä–æ—Å—Ç–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ —Å –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ–º")
            print("  python build_rag.py --test       # –ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ sample –¥–∞–Ω–Ω—ã—Ö")
            print("  python build_rag.py --help       # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É")
            return

    use_semantic = mode == "semantic"
    chunking_type = "—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π" if use_semantic else "–ø—Ä–æ—Å—Ç–æ–π"
    
    if test_mode:
        logger.info("üß™ –†–µ–∂–∏–º –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è RAG")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        input_file = Path("data/confluence_test_data.json")
        output_dir = Path("data/faiss_test_index")
        
        # –°–æ–∑–¥–∞–µ–º RAG Builder —Å —É—Å–∫–æ—Ä–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        rag_builder = RAGBuilder(
            model_name="BAAI/bge-m3",
            embedding_dim=1024,
            chunk_size=800,  # –ú–µ–Ω—å—à–∏–π —Ä–∞–∑–º–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            overlap_size=100,
            batch_size=16,   # –ú–µ–Ω—å—à–∏–π batch –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
            use_semantic_chunking=True,  # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é —Ä–∞–∑–±–∏–≤–∫—É –≤ —Ç–µ—Å—Ç–µ
            similarity_threshold=0.6     # –ù–µ–º–Ω–æ–≥–æ –Ω–∏–∂–µ –ø–æ—Ä–æ–≥ –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥—Ä–∞–Ω–∏—Ü
        )
        
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –±—ã—Å—Ç—Ä–æ–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ RAG")
        
    else:
        logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ RAG –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã —Å {chunking_type} —Ä–∞–∑–±–∏–≤–∫–æ–π")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–ª–Ω–æ–π —Å–±–æ—Ä–∫–∏
        input_file = Path("data/confluence_data.json")
        output_dir = Path("data/faiss_index")
        
        # –°–æ–∑–¥–∞–µ–º RAG Builder —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç–∏–ø–æ–º —Ä–∞–∑–±–∏–≤–∫–∏
        rag_builder = RAGBuilder(
            model_name="BAAI/bge-m3",
            embedding_dim=1024,
            chunk_size=512,
            overlap_size=50,
            batch_size=100,
            use_semantic_chunking=use_semantic,
            similarity_threshold=0.7  # –ü–æ—Ä–æ–≥ —Å—Ö–æ–¥—Å—Ç–≤–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —á–∞–Ω–∫–æ–≤
        )

    # –°—Ç—Ä–æ–∏–º RAG –±–∞–∑—É
    await rag_builder.build_from_confluence_data(input_file, output_dir)

    if test_mode:
        logger.info("üéâ –¢–µ—Å—Ç–æ–≤—ã–π RAG —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
        await test_rag_search(output_dir)
        
        logger.info("üìã –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞:")
        logger.info("  ‚úÖ –ë—ã—Å—Ç—Ä–∞—è —Å–±–æ—Ä–∫–∞ –Ω–∞ 5 sample –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö")
        logger.info("  ‚úÖ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
        logger.info("  ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞")
        logger.info("  ‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞")
        
    else:
        logger.info(f"üéâ RAG —Å {chunking_type} —Ä–∞–∑–±–∏–≤–∫–æ–π —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")

        if use_semantic:
            logger.info("üìã –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–∑–±–∏–≤–∫–∏:")
            logger.info("  ‚úÖ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ —Å –∑–∞—â–∏—Ç–æ–π URL –∏ email")
            logger.info("  ‚úÖ –ê–Ω–∞–ª–∏–∑ —Å—Ö–æ–¥—Å—Ç–≤–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –ø–æ—Ä–æ–≥–æ–º")
            logger.info("  ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã –ø–æ —Å–º—ã—Å–ª—É")
            logger.info("  ‚úÖ –£–º–Ω–æ–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ")
            logger.info("  ‚úÖ –ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ –±–æ–ª—å—à–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            logger.info("  ‚úÖ –°–∫–æ–ª—å–∑—è—â–µ–µ –æ–∫–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–≤—è–∑–Ω–æ—Å—Ç–∏")
        else:
            logger.info("üìã –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Å—Ç–æ–π —Ä–∞–∑–±–∏–≤–∫–∏:")
            logger.info("  ‚úÖ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–æ–≤")
            logger.info("  ‚úÖ –ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –ø–æ —Å–∏–º–≤–æ–ª–∞–º")
            logger.info("  ‚úÖ –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞")

        logger.info("üîç –û–±—â–∏–µ —É–ª—É—á—à–µ–Ω–∏—è:")
        logger.info("  ‚úÖ –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å —ç–º–æ–¥–∑–∏")
        logger.info("  ‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–∏–ø–µ —Ä–∞–∑–±–∏–≤–∫–∏")
        logger.info("  ‚úÖ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ –ø–æ–∏—Å–∫–µ")
        logger.info("  ‚úÖ –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞–∑–±–∏–≤–∫–∏ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏")


if __name__ == "__main__":
    asyncio.run(main())
