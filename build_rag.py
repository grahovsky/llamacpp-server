#!/usr/bin/env python3
"""–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ RAG –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –∏–∑ confluence_data.json —Å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–∑–±–∏–≤–∫–æ–π."""

import asyncio
from pathlib import Path

import structlog

from llamacpp_server.retrieval.rag_builder import RAGBuilder

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
structlog.configure(
    processors=[
        structlog.stdlib.filter_by_level,
        structlog.stdlib.add_logger_name,
        structlog.stdlib.add_log_level,
        structlog.stdlib.PositionalArgumentsFormatter(),
        structlog.processors.TimeStamper(fmt="ISO"),
        structlog.dev.ConsoleRenderer()
    ],
    wrapper_class=structlog.stdlib.BoundLogger,
    logger_factory=structlog.stdlib.LoggerFactory(),
    cache_logger_on_first_use=True,
)
logger = structlog.get_logger(__name__)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è RAG —Å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–∑–±–∏–≤–∫–æ–π."""
    import sys

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–∞–∑–±–∏–≤–∫–∏ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    use_semantic = True
    if len(sys.argv) > 1:
        if sys.argv[1] == "--simple":
            use_semantic = False
        elif sys.argv[1] == "--semantic":
            use_semantic = True
        elif sys.argv[1] == "--help":
            print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
            print("  python build_rag.py --semantic   # –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
            print("  python build_rag.py --simple     # –ü—Ä–æ—Å—Ç–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ —Å –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ–º")
            print("  python build_rag.py --help       # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É")
            return

    chunking_type = "—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π" if use_semantic else "–ø—Ä–æ—Å—Ç–æ–π"
    logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ RAG –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã —Å {chunking_type} —Ä–∞–∑–±–∏–≤–∫–æ–π")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    input_file = Path("data/confluence_data.json")
    output_dir = Path("data/faiss_index")

    # –°–æ–∑–¥–∞–µ–º RAG Builder —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç–∏–ø–æ–º —Ä–∞–∑–±–∏–≤–∫–∏
    rag_builder = RAGBuilder(
        model_name="BAAI/bge-m3",
        embedding_dim=1024,
        chunk_size=1500,
        overlap_size=200,
        batch_size=32,
        use_semantic_chunking=use_semantic,
        similarity_threshold=0.7  # –ü–æ—Ä–æ–≥ —Å—Ö–æ–¥—Å—Ç–≤–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —á–∞–Ω–∫–æ–≤
    )

    # –°—Ç—Ä–æ–∏–º RAG –±–∞–∑—É
    await rag_builder.build_from_confluence_data(input_file, output_dir)

    logger.info(f"üéâ RAG —Å {chunking_type} —Ä–∞–∑–±–∏–≤–∫–æ–π —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")

    if use_semantic:
        logger.info("üìã –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–∑–±–∏–≤–∫–∏:")
        logger.info("  ‚úÖ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ —Å –∑–∞—â–∏—Ç–æ–π URL –∏ email")
        logger.info("  ‚úÖ –ê–Ω–∞–ª–∏–∑ —Å—Ö–æ–¥—Å—Ç–≤–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
        logger.info("  ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã –ø–æ —Å–º—ã—Å–ª—É")
        logger.info("  ‚úÖ –£–º–Ω–æ–µ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
    else:
        logger.info("üìã –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Å—Ç–æ–π —Ä–∞–∑–±–∏–≤–∫–∏:")
        logger.info("  ‚úÖ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–æ–≤")
        logger.info("  ‚úÖ –ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –ø–æ —Å–∏–º–≤–æ–ª–∞–º")
        logger.info("  ‚úÖ –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞")

    logger.info("üîç –û–±—â–∏–µ —É–ª—É—á—à–µ–Ω–∏—è:")
    logger.info("  ‚úÖ –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å —ç–º–æ–¥–∑–∏")
    logger.info("  ‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–∏–ø–µ —Ä–∞–∑–±–∏–≤–∫–∏")
    logger.info("  ‚úÖ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ –ø–æ–∏—Å–∫–µ")


if __name__ == "__main__":
    asyncio.run(main())
