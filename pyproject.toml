[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build_meta"

[tool.uv]
package = false

conflicts = [
  [
    { extra = "cpu" },
    { extra = "gpu" }
  ]
]

[tool.uv.sources]
torch = [
  { index = "pytorch-cpu", extra = "cpu" },
  { index = "pytorch-gpu", extra = "gpu" }
]
torchvision = [
  { index = "pytorch-cpu", extra = "cpu" },
  { index = "pytorch-gpu", extra = "gpu" }
]

[[tool.uv.index]]
name = "pytorch-cpu"
url = "https://download.pytorch.org/whl/cpu"
explicit = true

[[tool.uv.index]]
name = "pytorch-gpu" 
url = "https://download.pytorch.org/whl/cu124"
explicit = true

[project]
name = "llamacpp-server"
version = "1.0.0"
description = "OpenAI-compatible HTTP API server for llama.cpp"
authors = [{name = "AI Tools Team", email = "dev@ai-tools.local"}]
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
keywords = ["llama-cpp", "api", "openai", "llm", "gguf", "open-webui"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

# –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (–±–µ–∑ llama-cpp-python - –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "structlog>=23.2.0",
    "dependency-injector>=4.41.0",
    "aiofiles>=23.2.1",
    # RAG dependencies
    "faiss-cpu>=1.8.0",
    "numpy>=1.24.0",
    "scikit-learn>=1.3.0",
    "langchain-community>=0.3.24",
]

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
[project.optional-dependencies]
# –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞
dev = [
    "ruff>=0.8.0",
    "mypy>=1.13.0",
    "pytest>=8.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    "httpx>=0.28.1",
    "respx>=0.22.0",
]

# CPU –≤–µ—Ä—Å–∏—è
cpu = [
    "llama-cpp-python>=0.3.9",
    "sentence-transformers>=3.0.0",
    "torch>=2.0.0",
    "torchvision>=0.15.0",
]

# GPU –≤–µ—Ä—Å–∏—è (CUDA 12.4)
gpu = [
    "llama-cpp-python>=0.3.9",
    "sentence-transformers>=3.0.0",
    "torch>=2.0.0",
    "torchvision>=0.15.0",
]

# –í—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (CPU –≤–µ—Ä—Å–∏—è)
all = [
    "llama-cpp-python[server]>=0.3.9",
    "faiss-cpu>=1.8.0",
    "sentence-transformers>=3.0.0",
    "numpy>=1.24.0",
    "ruff>=0.8.0",
    "mypy>=1.13.0",
    "pytest>=8.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    "httpx>=0.28.1",
    "respx>=0.22.0",
]

# Scripts –¥–ª—è –∑–∞–ø—É—Å–∫–∞
[project.scripts]
llamacpp-server = "llamacpp_server.main:main"

[dependency-groups]
dev = [
    "httpx>=0.28.1",
    "pytest>=8.4.0",
]

# =====================================
# üõ†Ô∏è MODERN PYTHON TOOLING
# =====================================

# Ruff - –ª–∏–Ω—Ç–µ—Ä –∏ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
[tool.ruff]
target-version = "py311"
line-length = 100
src = ["llamacpp_server"]

[tool.ruff.lint]
select = [
    "E", "W",    # pycodestyle
    "F",         # pyflakes
    "UP",        # pyupgrade
    "B",         # flake8-bugbear
    "I",         # isort
    "N",         # pep8-naming
    "S",         # flake8-bandit
    "C4",        # flake8-comprehensions
    "ICN",       # flake8-import-conventions
    "T20",       # flake8-print
]

ignore = [
    "E501",   # Line too long
    "S101",   # Use of assert
]

[tool.ruff.lint.isort]
known-first-party = ["llamacpp_server"]

# MyPy - —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è
[tool.mypy]
python_version = "3.11"
strict = true
ignore_missing_imports = true
plugins = ["pydantic.mypy"]

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"] 
