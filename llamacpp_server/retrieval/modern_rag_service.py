"""–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π RAG —Å–µ—Ä–≤–∏—Å –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞."""

from typing import Any

import structlog

from ..config.settings import get_settings
from ..prompts.service import PromptService
from .modern_embeddings import EmbeddingProvider, ModernEmbeddingService
from .modern_vector_store import VectorStoreProtocol, VectorStoreType
from .protocols import Document

logger = structlog.get_logger(__name__)


class ModernRAGService:
    """–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è Retrieval-Augmented Generation —Å –ª—É—á—à–∏–º–∏ –ø—Ä–∞–∫—Ç–∏–∫–∞–º–∏ 2025."""

    def __init__(
        self,
        embedding_service: ModernEmbeddingService | None = None,
        vector_store: VectorStoreProtocol | None = None,
        settings: Any | None = None,
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        embedding_provider: EmbeddingProvider = EmbeddingProvider.SENTENCE_TRANSFORMERS,
        embedding_model: str = "BAAI/bge-m3",
        vector_store_type: VectorStoreType = VectorStoreType.CHROMADB,
        collection_name: str = "rag_documents"
    ) -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ RAG —Å–µ—Ä–≤–∏—Å–∞.

        Args:
            embedding_service: –ì–æ—Ç–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            vector_store: –ì–æ—Ç–æ–≤–æ–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            settings: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            embedding_provider: –ü—Ä–æ–≤–∞–π–¥–µ—Ä —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–ª—è –∞–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            embedding_model: –ú–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–ª—è –∞–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            vector_store_type: –¢–∏–ø –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–ª—è –∞–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            collection_name: –ò–º—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è –∞–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        """
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if settings is None:
            settings = get_settings()
        self._settings = settings

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∞–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self._embedding_provider = embedding_provider
        self._embedding_model = embedding_model
        self._vector_store_type = vector_store_type
        self._collection_name = collection_name

        # RAG –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self._search_k = getattr(settings, 'rag_search_k', 5)
        self._max_context_length = getattr(settings, 'rag_max_context', 8000)
        self._min_score = getattr(settings, 'modern_min_score', 0.0)

        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self._embedding_service = embedding_service
        self._vector_store = vector_store
        self._prompt_service = PromptService(settings)

        # –§–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self._initialized = False

        logger.info("–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π RAG —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω",
                   embedding_provider=embedding_provider.value,
                   vector_store_type=vector_store_type.value,
                   collection_name=collection_name,
                   max_context_length=self._max_context_length,
                   min_score=self._min_score)

    async def initialize(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
        if self._initialized:
            return

        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ RAG —Å–µ—Ä–≤–∏—Å–∞")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º embedding service –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
        if self._embedding_service is None:
            embedding_config = {
                "provider": self._embedding_provider,
                "model_name": self._embedding_model
            }

            if self._embedding_provider == EmbeddingProvider.OPENAI:
                embedding_config["api_key"] = self._settings.openai_api_key

            self._embedding_service = ModernEmbeddingService(**embedding_config)
            await self._embedding_service.initialize()
            logger.info("‚úÖ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–º–±–µ–¥–¥–∏–Ω–≥ —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º vector store –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
        if self._vector_store is None:
            store_config = {
                "collection_name": self._collection_name,
                "persist_path": getattr(self._settings, 'chromadb_path', './data/chromadb')
            }

            from .modern_vector_store import ModernVectorStoreFactory
            
            self._vector_store = ModernVectorStoreFactory.create_store("chroma", **store_config)
            logger.info("‚úÖ –°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")

        self._initialized = True
        logger.info("‚úÖ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π RAG —Å–µ—Ä–≤–∏—Å –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

    async def create_rag_prompt(self, user_query: str) -> str:
        """–°–æ–∑–¥–∞—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π RAG –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."""
        await self.initialize()

        logger.info("üß† –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ RAG –ø—Ä–æ–º–ø—Ç–∞", query_preview=user_query[:100])

        try:
            # –ò—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context_docs = await self.search_relevant_context(
                user_query, 
                k=self._search_k, 
                min_score=self._min_score
            )

            if not context_docs:
                logger.warning("‚ö†Ô∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç")
                context_list = ["–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."]
            else:
                context_list = context_docs
                logger.info("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞–π–¥–µ–Ω", docs_count=len(context_docs))

            # –°–æ–∑–¥–∞–µ–º RAG –ø—Ä–æ–º–ø—Ç
            rag_prompt = await self._prompt_service.create_rag_prompt(
                query=user_query,
                context=context_list
            )

            logger.debug("–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π RAG –ø—Ä–æ–º–ø—Ç —Å–æ–∑–¥–∞–Ω",
                        original_len=len(user_query),
                        rag_len=len(rag_prompt),
                        context_docs=len(context_list))

            return rag_prompt

        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ RAG –ø—Ä–æ–º–ø—Ç–∞", error=str(e), exc_info=True)
            # Fallback: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–º–ø—Ç —Å –ø—É—Å—Ç—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            return await self._prompt_service.create_rag_prompt(
                query=user_query,
                context=["–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏."]
            )

    async def search_relevant_context(
        self,
        query: str,
        k: int = 5,
        min_score: float = 0.0
    ) -> list[str]:
        """
        –ù–∞–π—Ç–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏ –ø–æ–∏—Å–∫–∞.

        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            k: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
            min_score: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π score –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        """
        await self.initialize()

        logger.info("üîç –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π RAG –ø–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞",
                   query_preview=query[:100],
                   k=k,
                   min_score=min_score)

        try:
            # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –∑–∞–ø—Ä–æ—Å–∞
            logger.debug("üß† –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞")
            query_embedding = await self._embedding_service.embed_text(query)
            logger.debug("–≠–º–±–µ–¥–¥–∏–Ω–≥ —Å–æ–∑–¥–∞–Ω", embedding_dim=len(query_embedding))

            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            search_results = await self._vector_store.search(
                query_embedding=query_embedding,
                k=k,
                min_score=min_score
            )
            logger.info("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ–ª—É—á–µ–Ω—ã", found_docs=len(search_results))

            if not search_results:
                logger.warning("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
                return []

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å —É—á–µ—Ç–æ–º –ª–∏–º–∏—Ç–æ–≤
            context_docs = []
            total_length = 0
            unique_sources = set()

            for i, result in enumerate(search_results):
                document = result.document
                score = result.score
                content = document.content
                metadata = document.metadata

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                title = metadata.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                source_url = metadata.get('source', '')
                chunking_strategy = metadata.get('chunking_strategy', 'unknown')
                embedding_provider = metadata.get('embedding_provider', 'unknown')

                # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
                if source_url:
                    unique_sources.add((title, source_url))

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –¥–ª–∏–Ω—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                if total_length + len(content) > self._max_context_length:
                    remaining = self._max_context_length - total_length
                    if remaining > 100:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –ø–æ–ª–µ–∑–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                        truncated_content = content[:remaining-50] + "...[–û–ë–†–ï–ó–ê–ù–û]"
                        context_docs.append(truncated_content)
                        total_length += len(truncated_content)
                        logger.debug(f"–î–æ–∫—É–º–µ–Ω—Ç {i+1} –æ–±—Ä–µ–∑–∞–Ω –¥–æ {remaining} —Å–∏–º–≤–æ–ª–æ–≤")
                    break

                context_docs.append(content)
                total_length += len(content)

                logger.debug(f"–î–æ–∫—É–º–µ–Ω—Ç {i+1} –¥–æ–±–∞–≤–ª–µ–Ω",
                           score=f"{score:.3f}",
                           title=title,
                           length=len(content),
                           chunking_strategy=chunking_strategy,
                           embedding_provider=embedding_provider)

            # –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            sources_list = [f"{title} - {url}" for title, url in unique_sources]

            logger.info("‚úÖ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç –≥–æ—Ç–æ–≤",
                       documents=len(context_docs),
                       total_chars=total_length,
                       unique_sources=len(sources_list),
                       avg_score=f"{sum(r.score for r in search_results[:len(context_docs)]) / len(context_docs):.3f}",
                       sources=sources_list[:3])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –∏—Å—Ç–æ—á–Ω–∏–∫–∞

            return context_docs

        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ RAG –ø–æ–∏—Å–∫–∞", error=str(e), exc_info=True)
            return []

    async def add_document(
        self,
        content: str,
        metadata: dict[str, Any]
    ) -> bool:
        """
        –î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.

        Args:
            content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            metadata: –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞

        Returns:
            True –µ—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω
        """
        await self.initialize()

        try:
            # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥
            embedding = await self._embedding_service.embed_text(content)

            # –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            document = Document(
                id=metadata.get('id', str(hash(content))),
                content=content,
                metadata=metadata
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            await self._vector_store.add_document(document, embedding)

            logger.info("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω",
                       title=metadata.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                       content_length=len(content))
            return True

        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞", error=str(e), exc_info=True)
            return False

    async def batch_add_documents(
        self,
        documents: list[dict[str, Any]],
        batch_size: int = 32
    ) -> dict[str, Any]:
        """
        –î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –±–∞—Ç—á–∞–º–∏.

        Args:
            documents: –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ [{"content": str, "metadata": dict}]
            batch_size: –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞

        Returns:
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        """
        await self.initialize()

        logger.info("üì¶ –ù–∞—á–∏–Ω–∞–µ–º –±–∞—Ç—á–µ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
                   total_docs=len(documents),
                   batch_size=batch_size)

        if not documents:
            return {"success": False, "error": "–ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"}

        try:
            stats = {
                "total_docs": len(documents),
                "processed_docs": 0,
                "failed_docs": 0,
                "batches": 0,
                "success": True
            }

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á–∞–º–∏
            for i in range(0, len(documents), batch_size):
                batch = documents[i:i + batch_size]
                batch_num = i // batch_size + 1

                logger.info(f"üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á {batch_num}", batch_size=len(batch))

                # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è –±–∞—Ç—á–∞
                texts = [doc["content"] for doc in batch]
                embeddings = await self._embedding_service.embed_batch(texts)

                # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
                for doc_data, embedding in zip(batch, embeddings, strict=False):
                    try:
                        document = Document(
                            id=doc_data["metadata"].get('id', str(hash(doc_data["content"]))),
                            content=doc_data["content"],
                            metadata=doc_data["metadata"]
                        )

                        await self._vector_store.add_document(document, embedding)
                        stats["processed_docs"] += 1

                    except Exception as e:
                        logger.error("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –±–∞—Ç—á–µ", error=str(e))
                        stats["failed_docs"] += 1

                stats["batches"] += 1
                logger.info(f"‚úÖ –ë–∞—Ç—á {batch_num} –æ–±—Ä–∞–±–æ—Ç–∞–Ω",
                           processed=stats["processed_docs"],
                           failed=stats["failed_docs"])

            logger.info("‚úÖ –ë–∞—Ç—á–µ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", **stats)
            return stats

        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –±–∞—Ç—á–µ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è", error=str(e), exc_info=True)
            return {"success": False, "error": str(e)}

    async def get_collection_stats(self) -> dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–ª–ª–µ–∫—Ü–∏–∏."""
        await self.initialize()

        try:
            stats = await self._vector_store.get_stats()
            logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∞", **stats)
            return stats
        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", error=str(e), exc_info=True)
            return {"error": str(e)}

    async def is_ready(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞."""
        try:
            await self.initialize()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            embedding_ready = await self._embedding_service.is_ready()
            vector_store_ready = await self._vector_store.is_ready()

            ready = embedding_ready and vector_store_ready

            logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ RAG —Å–µ—Ä–≤–∏—Å–∞",
                       embedding_ready=embedding_ready,
                       vector_store_ready=vector_store_ready,
                       overall_ready=ready)

            return ready

        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏", error=str(e), exc_info=True)
            return False

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º API
    async def enhance_prompt_with_context(
        self,
        original_prompt: str,
        context: list[str]
    ) -> str:
        """–£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)."""
        if not context:
            logger.debug("–ù–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞")
            return original_prompt

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è RAG –ø—Ä–æ–º–ø—Ç–∞
        enhanced_prompt = await self._prompt_service.create_rag_prompt(
            query=original_prompt,
            context=context
        )

        logger.debug("–ü—Ä–æ–º–ø—Ç —É–ª—É—á—à–µ–Ω —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –º–µ—Ç–æ–¥–æ–º",
                    original_len=len(original_prompt),
                    enhanced_len=len(enhanced_prompt),
                    context_docs=len(context))

        return enhanced_prompt
