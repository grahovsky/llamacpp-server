"""RAG —Å–µ—Ä–≤–∏—Å –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞."""

from pathlib import Path
from typing import Any

import structlog

from ..config.settings import get_settings
from ..prompts.templates import get_prompt_template
from .protocols import EmbeddingServiceProtocol, VectorStoreProtocol

logger = structlog.get_logger(__name__)


class RAGService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è Retrieval-Augmented Generation."""

    def __init__(
        self,
        embedding_service: EmbeddingServiceProtocol,
        vector_store: VectorStoreProtocol
    ) -> None:
        self._embedding_service = embedding_service
        self._vector_store = vector_store
        settings = get_settings()
        self._index_path = Path(settings.faiss_index_path)
        self._search_k = settings.rag_search_k
        self._max_context_length = settings.rag_max_context

        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –º–æ–¥–µ–ª–∏
        self._model_type = settings.get_model_type()
        self._prompt_template = get_prompt_template(self._model_type)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self._embedding_model = None
        self._faiss_index = None
        self._documents = []

        logger.info("RAG —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω",
                   max_context_length=self._max_context_length,
                   model_type=self._model_type)

    async def create_rag_prompt(self, user_query: str) -> str:
        """–°–æ–∑–¥–∞—Ç—å RAG –ø—Ä–æ–º–ø—Ç –¥–ª—è –ª—é–±–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (–Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è RAG-only)."""
        logger.info("üß† –°–æ–∑–¥–∞–Ω–∏–µ RAG –ø—Ä–æ–º–ø—Ç–∞", query_preview=user_query[:100])

        try:
            # –ò—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context_docs = await self.search_relevant_context(user_query, k=self._search_k)
            
            if not context_docs:
                logger.warning("‚ö†Ô∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç")
                context_text = "–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
            else:
                context_text = "\n\n".join(context_docs)
                logger.info("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞–π–¥–µ–Ω", docs_count=len(context_docs))

            # –°–æ–∑–¥–∞–µ–º RAG –ø—Ä–æ–º–ø—Ç –∏—Å–ø–æ–ª—å–∑—É—è –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω
            rag_prompt = self._prompt_template.format_rag_prompt(
                query=user_query,
                context=context_docs
            )

            logger.debug("RAG –ø—Ä–æ–º–ø—Ç —Å–æ–∑–¥–∞–Ω",
                        original_len=len(user_query),
                        rag_len=len(rag_prompt),
                        context_docs=len(context_docs))

            return rag_prompt

        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è RAG –ø—Ä–æ–º–ø—Ç–∞", error=str(e), exc_info=True)
            # Fallback: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–º–ø—Ç —Å –ø—É—Å—Ç—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            return self._prompt_template.format_rag_prompt(
                query=user_query,
                context=["–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏."]
            )

    async def enhance_prompt_with_context(
        self, original_prompt: str, context: list[str]
    ) -> str:
        """–£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π."""
        if not context:
            logger.debug("–ù–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞")
            return original_prompt

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
        context_text = "\n\n".join(context)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–±–ª–æ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –º–æ–¥–µ–ª–∏
        enhanced_prompt = self._prompt_template.format_rag_prompt(
            query=original_prompt,
            context=context
        )

        logger.debug("–ü—Ä–æ–º–ø—Ç —É–ª—É—á—à–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º",
                    original_len=len(original_prompt),
                    enhanced_len=len(enhanced_prompt),
                    context_docs=len(context),
                    model_type=self._model_type)

        # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        logger.debug("üîç RAG Enhanced Prompt Preview",
                    enhanced_preview=enhanced_prompt[:800] + "..." if len(enhanced_prompt) > 800 else enhanced_prompt)

        return enhanced_prompt

    async def search_relevant_context(
        self, query: str, k: int = 5
    ) -> list[str]:
        """–ù–∞–π—Ç–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å citation-focused —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
        logger.info("üîç RAG –ø–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º", query_preview=query[:100], k=k)

        try:
            # –ü–æ–ª—É—á–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –∑–∞–ø—Ä–æ—Å–∞
            query_embedding = await self._embedding_service.embed_text(query)
            logger.debug("–≠–º–±–µ–¥–¥–∏–Ω–≥ —Å–æ–∑–¥–∞–Ω", embedding_dim=len(query_embedding))

            # –ò—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
            search_results = await self._vector_store.search(query_embedding, k=k)
            logger.info("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ–ª—É—á–µ–Ω—ã", found_docs=len(search_results))

            if not search_results:
                logger.warning("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
                return []

            # –ü—Ä–æ—Å—Ç–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∫–∞–∫ –µ—Å—Ç—å
            context_docs = []
            total_length = 0
            unique_sources = set()

            for _, result in enumerate(search_results):
                document = result.document
                content = document.content  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∫–∞–∫ –µ—Å—Ç—å (—É–∂–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º)
                metadata = document.metadata
                
                title = metadata.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                source_url = metadata.get('source', '')
                
                # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                if source_url:
                    unique_sources.add((title, source_url))

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –¥–ª–∏–Ω—ã
                if total_length + len(content) > self._max_context_length:
                    remaining = self._max_context_length - total_length
                    if remaining > 100:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –ø–æ–ª–µ–∑–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                        truncated_content = content[:remaining-20] + "...[–û–ë–†–ï–ó–ê–ù–û]"
                        context_docs.append(truncated_content)
                        total_length += len(truncated_content)
                        if source_url:
                            unique_sources.add((title, source_url))
                    break

                context_docs.append(content)
                total_length += len(content)

            sources_list = [f"{title} - {url}" for title, url in unique_sources]

            logger.info("‚úÖ RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç –≥–æ—Ç–æ–≤",
                       documents=len(context_docs),
                       total_chars=total_length,
                       unique_sources=len(sources_list),
                       sources=sources_list)

            return context_docs

        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ RAG –ø–æ–∏—Å–∫–∞ —Å —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º", error=str(e), exc_info=True)
            return []

    async def batch_add_documents(
        self, 
        documents: list, 
        batch_size: int = 50,
        show_progress: bool = True
    ) -> dict[str, Any]:
        """–î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –±–∞—Ç—á–∞–º–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º."""
        logger.info("üì¶ –ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
                   total_docs=len(documents),
                   batch_size=batch_size)

        if not documents:
            return {"success": False, "error": "–ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"}

        try:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
            stats = {
                "total_docs": len(documents),
                "processed_docs": 0,
                "failed_docs": 0,
                "batches_processed": 0,
                "total_batches": (len(documents) + batch_size - 1) // batch_size,
                "embeddings_created": 0,
                "errors": []
            }

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –±–∞—Ç—á–∞–º–∏
            for i in range(0, len(documents), batch_size):
                batch_docs = documents[i:i + batch_size]
                batch_num = stats["batches_processed"] + 1
                
                if show_progress:
                    logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ {batch_num}/{stats['total_batches']}",
                               docs_in_batch=len(batch_docs))

                try:
                    # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è –±–∞—Ç—á–∞
                    batch_embeddings = []
                    for doc in batch_docs:
                        try:
                            embedding = await self._embedding_service.embed_text(doc.content)
                            doc.embedding = embedding
                            batch_embeddings.append(embedding)
                            stats["embeddings_created"] += 1
                        except Exception as e:
                            logger.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞", 
                                       doc_id=getattr(doc, 'id', 'unknown'),
                                       error=str(e))
                            stats["failed_docs"] += 1
                            stats["errors"].append(f"Embedding error for doc {getattr(doc, 'id', 'unknown')}: {str(e)}")
                            continue

                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                    valid_docs = [doc for doc in batch_docs if hasattr(doc, 'embedding') and doc.embedding is not None]
                    
                    if valid_docs:
                        await self._vector_store.add_documents(valid_docs, batch_size=len(valid_docs))
                        stats["processed_docs"] += len(valid_docs)
                    
                    stats["batches_processed"] += 1

                    if show_progress:
                        progress_pct = (stats["processed_docs"] / stats["total_docs"]) * 100
                        logger.info(f"‚úÖ –ë–∞—Ç—á {batch_num} –∑–∞–≤–µ—Ä—à–µ–Ω",
                                   progress=f"{progress_pct:.1f}%",
                                   processed=stats["processed_docs"],
                                   total=stats["total_docs"])

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞ {batch_num}", error=str(e))
                    stats["errors"].append(f"Batch {batch_num} error: {str(e)}")
                    stats["failed_docs"] += len(batch_docs)

            # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            success_rate = (stats["processed_docs"] / stats["total_docs"]) * 100 if stats["total_docs"] > 0 else 0
            
            logger.info("üéâ –ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
                       total_docs=stats["total_docs"],
                       processed=stats["processed_docs"],
                       failed=stats["failed_docs"],
                       success_rate=f"{success_rate:.1f}%",
                       embeddings_created=stats["embeddings_created"])

            return {
                "success": True,
                "stats": stats,
                "success_rate": success_rate
            }

        except Exception as e:
            logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è", error=str(e), exc_info=True)
            return {
                "success": False,
                "error": str(e),
                "stats": stats if 'stats' in locals() else {}
            }
