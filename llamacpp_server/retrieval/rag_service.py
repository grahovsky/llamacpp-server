"""RAG —Å–µ—Ä–≤–∏—Å –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞."""

from pathlib import Path

import structlog

from ..config.settings import get_settings
from ..prompts.templates import RAG_TEMPLATES
from .protocols import EmbeddingServiceProtocol, VectorStoreProtocol

logger = structlog.get_logger(__name__)


class RAGService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è Retrieval-Augmented Generation."""

    def __init__(
        self,
        embedding_service: EmbeddingServiceProtocol,
        vector_store: VectorStoreProtocol
    ) -> None:
        self._embedding_service = embedding_service
        self._vector_store = vector_store
        settings = get_settings()
        self._index_path = Path(settings.faiss_index_path)
        self._search_k = settings.rag_search_k
        self._max_context_length = settings.rag_max_context

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self._embedding_model = None
        self._faiss_index = None
        self._documents = []

        logger.info("RAG —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω",
                   max_context_length=self._max_context_length)

    async def enhance_prompt_with_context(
        self, original_prompt: str, context: list[str]
    ) -> str:
        """–£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π."""
        if not context:
            logger.debug("–ù–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞")
            return original_prompt

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
        context_text = "\n\n".join(context)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º citation_focused_prompt –∫–∞–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
        enhanced_prompt = RAG_TEMPLATES["citation_focused_prompt"].format(
            context=context_text,
            question=original_prompt
        )

        logger.debug("–ü—Ä–æ–º–ø—Ç —É–ª—É—á—à–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º",
                    original_len=len(original_prompt),
                    enhanced_len=len(enhanced_prompt),
                    context_docs=len(context),
                    template_used="citation_focused_prompt")

        # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        logger.debug("üîç RAG Enhanced Prompt Preview",
                    enhanced_preview=enhanced_prompt[:800] + "..." if len(enhanced_prompt) > 800 else enhanced_prompt)

        return enhanced_prompt

    async def search_relevant_context(
        self, query: str, k: int = 5
    ) -> list[str]:
        """–ù–∞–π—Ç–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å citation-focused —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
        logger.info("üîç RAG –ø–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º", query_preview=query[:100], k=k)

        try:
            # –ü–æ–ª—É—á–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –∑–∞–ø—Ä–æ—Å–∞
            query_embedding = await self._embedding_service.embed_text(query)
            logger.debug("–≠–º–±–µ–¥–¥–∏–Ω–≥ —Å–æ–∑–¥–∞–Ω", embedding_dim=len(query_embedding))

            # –ò—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
            search_results = await self._vector_store.search(query_embedding, k=k)
            logger.info("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ–ª—É—á–µ–Ω—ã", found_docs=len(search_results))

            if not search_results:
                logger.warning("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
                return []

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –æ—Å–æ–±—ã–º –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
            context_docs = []
            total_length = 0
            unique_sources = set()

            for _, result in enumerate(search_results):
                document = result.document
                content = document.content
                metadata = document.metadata

                title = metadata.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                source_url = metadata.get('source', '')

                # –£—Å–∏–ª–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                if source_url:
                    unique_sources.add((title, source_url))
                    formatted_doc = f"""–î–æ–∫—É–º–µ–Ω—Ç: {title}
URL: {source_url}
–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {content}

"""
                else:
                    formatted_doc = f"""–î–æ–∫—É–º–µ–Ω—Ç: {title}
URL: [–∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω]
–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {content}

"""

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –¥–ª–∏–Ω—ã
                if total_length + len(formatted_doc) > self._max_context_length:
                    remaining = self._max_context_length - total_length
                    if remaining > 150:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –ø–æ–ª–µ–∑–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–∂–Ω—ã–µ —á–∞—Å—Ç–∏
                        header = f"–î–æ–∫—É–º–µ–Ω—Ç: {title}\nURL: {source_url}\n"
                        footer = "\n\n"
                        content_space = remaining - len(header) - len(footer) - len('–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: ') - 20

                        if content_space > 80:
                            truncated_content = content[:content_space] + "...[–û–ë–†–ï–ó–ê–ù–û]"
                            formatted_doc = f'{header}–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {truncated_content}{footer}'

                            context_docs.append(formatted_doc)
                            total_length += len(formatted_doc)
                            if source_url:
                                unique_sources.add((title, source_url))
                    break

                context_docs.append(formatted_doc)
                total_length += len(formatted_doc)

            sources_list = [f"{title} - {url}" for title, url in unique_sources]

            logger.info("‚úÖ RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≥–æ—Ç–æ–≤",
                       documents=len(context_docs),
                       total_chars=total_length,
                       unique_sources=len(sources_list),
                       sources=sources_list)

            return context_docs

        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ RAG –ø–æ–∏—Å–∫–∞ —Å —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º", error=str(e), exc_info=True)
            return []
