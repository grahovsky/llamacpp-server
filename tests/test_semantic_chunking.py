#!/usr/bin/env python3
"""–¢–µ—Å—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–∑–±–∏–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞."""

import asyncio

import structlog
from sentence_transformers import SentenceTransformer

from llamacpp_server.retrieval.semantic_chunker import SemanticChunker

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
structlog.configure(
    processors=[
        structlog.stdlib.filter_by_level,
        structlog.stdlib.add_logger_name,
        structlog.stdlib.add_log_level,
        structlog.stdlib.PositionalArgumentsFormatter(),
        structlog.processors.TimeStamper(fmt="ISO"),
        structlog.dev.ConsoleRenderer()
    ],
    wrapper_class=structlog.stdlib.BoundLogger,
    logger_factory=structlog.stdlib.LoggerFactory(),
    cache_logger_on_first_use=True,
)
logger = structlog.get_logger(__name__)


async def test_semantic_chunking():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–∑–±–∏–≤–∫–∏."""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–∑–±–∏–≤–∫–∏")

    # –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å URL –∏ email
    test_text = """
    Jenkins - —ç—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–≥–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —á–∞—Å—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –Ω–∞ https://jenkins.io –∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –ø–æ admin@company.com.
    
    –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Jenkins –¥–æ–≤–æ–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–∞. –°–Ω–∞—á–∞–ª–∞ –≤–∞–º –Ω—É–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å Jenkins —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞. –ó–∞—Ç–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–π —Ñ–∞–π–ª –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –º–∞—Å—Ç–µ—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏.
    
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Jenkins –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã—Ö —à–∞–≥–æ–≤. –í–æ-–ø–µ—Ä–≤—ã—Ö, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å. –í–æ-–≤—Ç–æ—Ä—ã—Ö, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–ª–∞–≥–∏–Ω—ã. –í-—Ç—Ä–µ—Ç—å–∏—Ö, —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ.
    
    –ü–ª–∞–≥–∏–Ω—ã Jenkins —Ä–∞—Å—à–∏—Ä—è—é—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã. –°—É—â–µ—Å—Ç–≤—É–µ—Ç –æ–≥—Ä–æ–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞–≥–∏–Ω–æ–≤ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ü–µ–ª–µ–π: –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–µ—Ä—Å–∏–π, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ. –°–ø–∏—Å–æ–∫ –ø–ª–∞–≥–∏–Ω–æ–≤ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ https://plugins.jenkins.io.
    
    Docker —è–≤–ª—è–µ—Ç—Å—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π. Docker –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è —É–ø–∞–∫–æ–≤–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –µ–≥–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ –ª–µ–≥–∫–æ–≤–µ—Å–Ω—ã–π, –ø–æ—Ä—Ç–∞—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä. –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ https://docs.docker.com.
    
    Kubernetes - —ç—Ç–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Å –æ—Ç–∫—Ä—ã—Ç—ã–º –∏—Å—Ö–æ–¥–Ω—ã–º –∫–æ–¥–æ–º. –û–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ, –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏. –ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞ https://kubernetes.io –∏–ª–∏ support@kubernetes.io.
    """

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
    logger.info("üß† –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤")
    model = SentenceTransformer("BAAI/bge-m3")

    # –°–æ–∑–¥–∞–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–∏–≤—â–∏–∫
    chunker = SemanticChunker(
        embedding_model=model,
        max_chunk_size=800,
        min_chunk_size=50,
        similarity_threshold=0.6,
        overlap_sentences=1
    )

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–±–∏–≤–∫—É
    logger.info("üî™ –í—ã–ø–æ–ª–Ω—è–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é —Ä–∞–∑–±–∏–≤–∫—É")
    chunks = await chunker.chunk_text(
        text=test_text.strip(),
        metadata={"title": "Test Document", "source": "https://test.com"}
    )

    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    logger.info("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–∑–±–∏–≤–∫–∏", total_chunks=len(chunks))

    for i, chunk in enumerate(chunks):
        content = chunk["content"]
        metadata = chunk["metadata"]

        print(f"\n{'='*60}")
        print(f"–ß–ê–ù–ö {i+1}/{len(chunks)}")
        print(f"{'='*60}")
        print(f"–†–∞–∑–º–µ—Ä: {metadata.get('chunk_size', len(content))} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"–¢–∏–ø: {metadata.get('chunk_type', 'unknown')}")
        print(f"–ò–Ω–¥–µ–∫—Å: {metadata.get('chunk_index', i)}")
        print("\n–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:")
        print("-" * 40)
        print(content)
        print("-" * 40)

    # –ü—Ä–æ–≤–µ—Ä–∏–º –∑–∞—â–∏—Ç—É URL –∏ email
    logger.info("üîí –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—â–∏—Ç—É URL –∏ email")

    urls_found = []
    emails_found = []

    for chunk in chunks:
        content = chunk["content"]
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è URL –∏ email
        if "http" in content or "www." in content:
            urls_found.append(chunk["metadata"]["chunk_index"])
        if "@" in content:
            emails_found.append(chunk["metadata"]["chunk_index"])

    logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞—â–∏—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω",
               chunks_with_urls=urls_found,
               chunks_with_emails=emails_found)

    print(f"\n{'='*60}")
    print("–ò–¢–û–ì–ò –¢–ï–°–¢–ê")
    print(f"{'='*60}")
    print(f"–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: {len(test_text)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"–ü–æ–ª—É—á–µ–Ω–æ —á–∞–Ω–∫–æ–≤: {len(chunks)}")
    print(f"–°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞: {sum(len(c['content']) for c in chunks) // len(chunks)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"–ß–∞–Ω–∫–∏ —Å URL: {len(urls_found)}")
    print(f"–ß–∞–Ω–∫–∏ —Å email: {len(emails_found)}")
    print("–¢–∏–ø —Ä–∞–∑–±–∏–≤–∫–∏: —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è")


if __name__ == "__main__":
    asyncio.run(test_semantic_chunking())
